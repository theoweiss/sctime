BUILD_DIR=$(shell pwd)
SRC_DIR=$(dir $(abspath $(MAKEFILE_LIST)))
PATCH_DIR=$(SRC_DIR)

CURL=curl
CURL_OPTS=-L
#CURL_OPTS=-x http://proxy:3128

PREFIX=$(BUILD_DIR)/deps

SDK=macosx10.15
SDK_PATH=$(shell xcrun --sdk $(SDK) --show-sdk-path)

QT_MINOR=5.15
QT_VER=$(QT_MINOR).0
QT_BN=qt-everywhere-src-$(QT_VER)
QT_SOURCE_FILE=$(QT_BN).tar.xz
QT_URL=http://download.qt.io/official_releases/qt/$(QT_MINOR)/$(QT_VER)/single/$(QT_SOURCE_FILE)
QT_DIR=$(BUILD_DIR)/qt
QT_SOURCE=$(QT_DIR)/$(QT_SOURCE_FILE)
QT_SOURCE_DIR=$(QT_DIR)/$(QT_BN)

PGSQL_VER=11.1
PGSQL_BN=postgresql-$(PGSQL_VER)
PGSQL_SOURCE_FILE=$(PGSQL_BN).tar.bz2
PGSQL_URL=http://ftp.postgresql.org/pub/source/v$(PGSQL_VER)/$(PGSQL_SOURCE_FILE)
PGSQL_DIR=$(BUILD_DIR)/postgres
PGSQL_SOURCE=$(PGSQL_DIR)/$(PGSQL_SOURCE_FILE)
PGSQL_SOURCE_DIR=$(PGSQL_DIR)/$(PGSQL_BN)
PGSQL_COMMON_CFLAGS=-mmacosx-version-min=10.12
PGSQL_COMMON_LDFLAGS=-mmacosx-version-min=10.12
PGSQL_CONFIGURE_FLAGS=--without-openssl --without-perl --without-python --without-tcl --without-bonjour --without-pam --with-gssapi --without-libxml

.PHONY: all clean mrproper clean.destdir \
	qt.clean pgsql.clean \
	qt.mrproper pgsql.mrproper

.SUFFIXES:

all: $(QT_DIR)/installed

clean:	clean.destdir qt.clean pgsql.clean
mrproper:	clean.destdir qt.mrproper pgsql.mrproper

clean.destdir:
	rm -rf "$(PREFIX)"

### Qt

$(QT_DIR)/installed: $(QT_DIR)/compiled
	cd "$(QT_SOURCE_DIR)" && \
		$(MAKE) -j1 install \
		&& touch "$@"

$(QT_DIR)/compiled: $(QT_DIR)/configured
	cd "$(QT_SOURCE_DIR)" && \
		$(MAKE) \
		&& touch "$@"

$(QT_DIR)/configured: $(QT_DIR)/patched $(PGSQL_DIR)/installed
	cd "$(QT_SOURCE_DIR)" && \
		./configure -release \
			-opensource -confirm-license \
			-sdk "$(SDK)" \
			-sql-psql \
			-prefix "$(PREFIX)" \
			-verbose \
			-skip qtwebengine \
			-skip qt3d \
			-skip qtlocation \
			-skip qtvirtualkeyboard \
			-nomake examples \
			-nomake tests \
			-I"$(PREFIX)"/include \
			-L"$(PREFIX)"/lib \
		&& touch "$@"

$(QT_DIR)/patched: $(QT_DIR)/unpacked
	cd "$(QT_SOURCE_DIR)" && \
		for i in "$(PATCH_DIR)"/qt-*.patch ; do \
			[ "$$i" = "$(PATCH_DIR)"/qt-"*".patch ] || \
				patch -p0 < "$$i" ; \
		done && \
		touch "$@"

$(QT_DIR)/unpacked: $(QT_DIR)/downloaded
	cd "$(QT_DIR)" && \
		rm -rf "$(QT_SOURCE_DIR)" && \
		tar -xzf "$(QT_SOURCE)" && \
		touch "$@"

$(QT_DIR)/downloaded:
	mkdir -p $(QT_DIR)
	rm -f "$(QT_SOURCE)" && \
		$(CURL) $(CURL_OPTS) -o "$(QT_SOURCE)" "$(QT_URL)" && \
		touch "$@"

qt.clean:
	rm -rf "$(QT_SOURCE_DIR)" \
		"$(QT_DIR)"/{unpacked,patched,configured,compiled,installed}

qt.mrproper:
	rm -rf "$(QT_DIR)"

### PostgreSQL

$(PGSQL_DIR)/installed: $(PGSQL_DIR)/compiled
	cd "$(PGSQL_SOURCE_DIR)" && \
		$(MAKE) install && \
		touch "$@"

# pgsql build system needs MAKELEVEL reset to zero because its generated header
# logic depends on detecting the level 0 make
$(PGSQL_DIR)/compiled: $(PGSQL_DIR)/configured
	cd "$(PGSQL_SOURCE_DIR)" && \
		$(MAKE) MAKELEVEL=0 && \
		touch "$@"

$(PGSQL_DIR)/configured: $(PGSQL_DIR)/patched
	cd "$(PGSQL_SOURCE_DIR)" && \
		CFLAGS="$(PGSQL_COMMON_CFLAGS)" \
			LDFLAGS="$(PGSQL_COMMON_LDFLAGS)" \
			PG_SYSROOT="$(SDK_PATH)" \
			./configure --prefix="$(PREFIX)" \
				$(PGSQL_CONFIGURE_FLAGS) && \
		touch "$@"

$(PGSQL_DIR)/patched: $(PGSQL_DIR)/unpacked
	cd "$(PGSQL_SOURCE_DIR)" && \
		for i in "$(PATCH_DIR)"/pgsql-*.patch ; do \
			[ "$$i" == "$(PATCH_DIR)/pgsql-*.patch" ] || \
				patch -p0 < "$$i" ; \
		done && \
		touch "$@"

$(PGSQL_DIR)/unpacked: $(PGSQL_DIR)/downloaded
	cd "$(PGSQL_DIR)" && \
		rm -rf "$(PGSQL_SOURCE_DIR)" && \
		tar -xjf "$(PGSQL_SOURCE)" && \
		touch "$@"

$(PGSQL_DIR)/downloaded:
	mkdir -p $(PGSQL_DIR)
	rm -f "$(PGSQL_SOURCE)" && \
		$(CURL) $(CURL_OPTS) -o "$(PGSQL_SOURCE)" "$(PGSQL_URL)" && \
		touch "$@"

pgsql.clean:
	rm -rf "$(PGSQL_SOURCE_DIR)" \
		"$(PGSQL_DIR)"/{unpacked,patched,configured,compiled,installed}

pgsql.mrproper:
	rm -rf "$(PGSQL_DIR)"
